version: "3"
services:

  mysqldb:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "db_product"
      MYSQL_USER: "product"
      MYSQL_PASSWORD: "product"
    ports:
      - "3306:3306"
    networks:
      - docker_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  otelcol:
    image: otel/opentelemetry-collector:0.83.0
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./opentelemetry/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "4317:4317"
      - "8889:8889"
    networks:
      - docker_network
    depends_on:
      - jaeger

  spring-boot-otlp-example:
    image: spring-boot-otlp-example:0.0.1-SNAPSHOT
    ports:
      - "8080:8080"
    networks:
      - docker_network
    depends_on:
      mysqldb:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/db_product?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: product
      SPRING_DATASOURCE_PASSWORD: product

  prometheus:
    image: prom/prometheus:v2.37.9
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prom-config.yml:/etc/prometheus/prometheus.yml
    networks:
      - docker_network

  jaeger:
    image: jaegertracing/all-in-one:1.48.0
    ports:
      - "6831:6831/udp"
      - "14250:14250"
      - "16686:16686"
    networks:
      - docker_network

  grafana:
    image: grafana/grafana:9.5.8
    ports:
      - "3000:3000"
    networks:
      - docker_network

networks:
  docker_network:
    driver: bridge